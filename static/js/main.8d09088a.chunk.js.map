{"version":3,"sources":["component/BoxWrapper.tsx","component/Draggable.tsx","component/Box.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BoxWrapper","children","onDrag","useState","top","left","difference","setDifference","position","setPosition","className","draggable","onDragStart","e","dataTransfer","setDragImage","currentTarget","onDragEnd","style","Draggable","props","action","type","prev","clientY","clientX","view","innerHeight","target","scrollHeight","innerWidth","scrollWidth","console","log","Children","map","box","index","Box","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAuBaA,EAAiD,SAAC,GAGxD,IAFLC,EAEI,EAFJA,SACAC,EACI,EADJA,OACI,EACgCC,mBAAS,CAAEC,IAAK,EAAGC,KAAM,IADzD,mBACGC,EADH,KACeC,EADf,OAE4BJ,mBAAS,CAAEC,IAAK,EAAGC,KAAM,IAFrD,mBAEGG,EAFH,KAEaC,EAFb,KAGJ,OACE,qBACEC,UAAU,cACVC,WAAS,EACTC,YAAa,SAACC,GACZA,EAAEC,aAAaC,aAAaF,EAAEG,eAAgB,KAAO,KACrDd,EAAOW,EAAGJ,EAAaH,EAAYC,IAErCL,OAAQ,SAACW,GACPX,EAAOW,EAAGJ,EAAaH,EAAYC,IAErCU,UAAW,SAACJ,GACVX,EAAOW,EAAGJ,EAAaH,EAAYC,IAErCW,MAAO,CAAEd,IAAKI,EAASJ,IAAKC,KAAMG,EAASH,MAb7C,SAeGJ,KCvCMkB,EAA+C,SAACC,GAC3D,IAAMlB,EAAS,SACbmB,EACAZ,EAMAH,EAIAC,GAOoB,cAAhBc,EAAOC,KACTb,GAAY,SAACc,GAMX,OALAhB,GAAc,iBAAO,CACnBH,IAAKiB,EAAOG,QAAUD,EAAKnB,IAC3BC,KAAMgB,EAAOI,QAAUF,EAAKlB,SAGvB,CACLD,IAAKmB,EAAKnB,IACVC,KAAMkB,EAAKlB,SAGa,IAAnBgB,EAAOG,SAAoC,IAAnBH,EAAOI,QACxChB,GAAY,SAACc,GACX,OAAOA,KAGTd,GAAY,SAACc,GACX,MAAO,CACLnB,IACEiB,EAAOK,KAAKC,aACTN,EAAOO,OAAOC,aAAevB,EAAWF,KACzCiB,EAAOG,SAAWlB,EAAWF,IAAMiB,EAAOG,QACxCH,EAAOG,QAAUlB,EAAWF,IAC5BiB,EAAOK,KAAKC,aACTN,EAAOO,OAAOC,aAAevB,EAAWF,KAC3CiB,EAAOG,QACP,EACAH,EAAOK,KAAKC,YAAcN,EAAOO,OAAOC,aAC9CxB,KACEgB,EAAOK,KAAKI,YACTT,EAAOO,OAAOG,YAAczB,EAAWD,MACxCgB,EAAOI,SAAWnB,EAAWD,KAAOgB,EAAOI,QACzCJ,EAAOI,QAAUnB,EAAWD,KAC5BgB,EAAOK,KAAKI,YACTT,EAAOO,OAAOG,YAAczB,EAAWD,MAC1CgB,EAAOI,QACP,EACAJ,EAAOK,KAAKI,WAAaT,EAAOO,OAAOG,iBAQrD,OAFAC,QAAQC,IAAIb,EAAMnB,UAGhB,qBAAKS,UAAU,YAAf,SACGwB,WAASC,IAAIf,EAAMnB,UAAU,SAACmC,EAAKC,GAClC,OACE,cAAC,EAAD,CAAwBnC,OAAQA,EAAhC,SACGkC,GADcC,SCxEdC,EAAmC,SAAClB,GAC/C,OAAO,qBAAKV,UAAU,SCQT6B,MARf,WACE,OACE,cAAC,EAAD,UACE,cAAC,EAAD,OCMSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8d09088a.chunk.js","sourcesContent":["import { FunctionComponent, ReactNode, useState } from 'react';\ninterface BoxWrapperProps {\n  children: ReactNode;\n  onDrag: (\n    action: any,\n    setPosition: React.Dispatch<\n      React.SetStateAction<{\n        top: number;\n        left: number;\n      }>\n    >,\n    difference: {\n      top: number;\n      left: number;\n    },\n    setDifference: React.Dispatch<\n      React.SetStateAction<{\n        top: number;\n        left: number;\n      }>\n    >\n  ) => void;\n}\nexport const BoxWrapper: FunctionComponent<BoxWrapperProps> = ({\n  children,\n  onDrag,\n}) => {\n  const [difference, setDifference] = useState({ top: 0, left: 0 });\n  const [position, setPosition] = useState({ top: 0, left: 0 });\n  return (\n    <div\n      className=\"box-wrapper\"\n      draggable\n      onDragStart={(e) => {\n        e.dataTransfer.setDragImage(e.currentTarget, -3000, -3000);\n        onDrag(e, setPosition, difference, setDifference);\n      }}\n      onDrag={(e) => {\n        onDrag(e, setPosition, difference, setDifference);\n      }}\n      onDragEnd={(e) => {\n        onDrag(e, setPosition, difference, setDifference);\n      }}\n      style={{ top: position.top, left: position.left }}\n    >\n      {children}\n    </div>\n  );\n};\n","import { Children, FunctionComponent, ReactChild, ReactChildren } from 'react';\nimport { BoxWrapper } from './BoxWrapper';\ninterface DraggableProps {\n  children: ReactChild | ReactChild[] | ReactChildren | ReactChildren[];\n}\n\nexport const Draggable: FunctionComponent<DraggableProps> = (props) => {\n  const onDrag = (\n    action: any,\n    setPosition: React.Dispatch<\n      React.SetStateAction<{\n        top: number;\n        left: number;\n      }>\n    >,\n    difference: {\n      top: number;\n      left: number;\n    },\n    setDifference: React.Dispatch<\n      React.SetStateAction<{\n        top: number;\n        left: number;\n      }>\n    >\n  ) => {\n    if (action.type === 'dragstart') {\n      setPosition((prev) => {\n        setDifference(() => ({\n          top: action.clientY - prev.top,\n          left: action.clientX - prev.left,\n        }));\n\n        return {\n          top: prev.top,\n          left: prev.left,\n        };\n      });\n    } else if (action.clientY === 0 && action.clientX === 0) {\n      setPosition((prev) => {\n        return prev;\n      });\n    } else {\n      setPosition((prev) => {\n        return {\n          top:\n            action.view.innerHeight -\n              (action.target.scrollHeight - difference.top) >\n              action.clientY && difference.top < action.clientY\n              ? action.clientY - difference.top\n              : action.view.innerHeight -\n                  (action.target.scrollHeight - difference.top) >\n                action.clientY\n              ? 0\n              : action.view.innerHeight - action.target.scrollHeight,\n          left:\n            action.view.innerWidth -\n              (action.target.scrollWidth - difference.left) >\n              action.clientX && difference.left < action.clientX\n              ? action.clientX - difference.left\n              : action.view.innerWidth -\n                  (action.target.scrollWidth - difference.left) >\n                action.clientX\n              ? 0\n              : action.view.innerWidth - action.target.scrollWidth,\n        };\n      });\n    }\n  };\n\n  console.log(props.children);\n\n  return (\n    <div className=\"draggable\">\n      {Children.map(props.children, (box, index) => {\n        return (\n          <BoxWrapper key={index} onDrag={onDrag}>\n            {box}\n          </BoxWrapper>\n        );\n      })}\n    </div>\n  );\n};\n","import { FunctionComponent } from 'react';\n\ninterface BoxProps {}\n\nexport const Box: FunctionComponent<BoxProps> = (props) => {\n  return <div className=\"box\"></div>;\n};\n\n// export default function Box() {\n//   return <div></div>;\n// }\n","import React from 'react';\nimport './App.css';\nimport { Draggable } from './component/Draggable';\nimport { Box } from './component/Box';\n\nfunction App() {\n  return (\n    <Draggable>\n      <Box />\n    </Draggable>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}