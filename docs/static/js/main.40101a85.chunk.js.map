{"version":3,"sources":["component/BoxWrapper.tsx","component/Draggable.tsx","component/Box.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BoxWrapper","children","onDrag","useState","top","left","position","setPosition","className","onDragStart","e","onDragEnd","style","Draggable","props","action","console","log","type","prev","clientY","clientX","map","item","index","Box","App","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAcaA,EAAiD,SAAC,GAGxD,IAFLC,EAEI,EAFJA,SACAC,EACI,EADJA,OACI,EAC4BC,mBAAS,CAAEC,IAAK,EAAGC,KAAM,IADrD,mBACGC,EADH,KACaC,EADb,KAEJ,OACE,qBACEC,UAAU,MACVC,YAAa,SAACC,GACZR,EAAOQ,EAAGH,IAEZL,OAAQ,SAACQ,GACPR,EAAOQ,EAAGH,IAEZI,UAAW,SAACD,GACVR,EAAOQ,EAAGH,IAEZK,MAAO,CAAER,IAAKE,EAASF,IAAKC,KAAMC,EAASD,MAX7C,SAaGJ,KC1BMY,EAA+C,SAACC,GAC3D,IAAMZ,EAAS,SACba,EACAR,GAOAS,QAAQC,IAAIF,GAERA,EAAOG,KACTX,GAAY,SAACY,GACX,MAAO,CACLf,IAAKW,EAAOK,QACZf,KAAMU,EAAOM,aAYrB,OACE,qBAAKb,UAAU,YAAf,SACGM,EAAMb,SAASqB,KAAI,SAACC,EAAMC,GACzB,OACE,cAAC,EAAD,CAAwBtB,OAAQA,EAAhC,SACGqB,GADcC,SCnCdC,EAAmC,SAACX,GAC/C,OAAO,qBAAKN,UAAU,SCSTkB,MATf,WACE,OACE,eAAC,EAAD,CAAWC,KAAK,MAAhB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCKSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.40101a85.chunk.js","sourcesContent":["import { FunctionComponent, ReactNode, useState } from 'react';\ninterface BoxWrapperProps {\n  children: ReactNode;\n\n  onDrag: (\n    action: any,\n    setPosition: React.Dispatch<\n      React.SetStateAction<{\n        top: number;\n        left: number;\n      }>\n    >\n  ) => void;\n}\nexport const BoxWrapper: FunctionComponent<BoxWrapperProps> = ({\n  children,\n  onDrag,\n}) => {\n  const [position, setPosition] = useState({ top: 0, left: 0 });\n  return (\n    <div\n      className=\"box\"\n      onDragStart={(e) => {\n        onDrag(e, setPosition);\n      }}\n      onDrag={(e) => {\n        onDrag(e, setPosition);\n      }}\n      onDragEnd={(e) => {\n        onDrag(e, setPosition);\n      }}\n      style={{ top: position.top, left: position.left }}\n    >\n      {children}\n    </div>\n  );\n};\n","import { FunctionComponent, ReactNode } from 'react';\nimport { BoxWrapper } from './BoxWrapper';\ninterface DraggableProps {\n  name: string;\n  children: Array<ReactNode>;\n}\n\nexport const Draggable: FunctionComponent<DraggableProps> = (props) => {\n  const onDrag = (\n    action: any,\n    setPosition: React.Dispatch<\n      React.SetStateAction<{\n        top: number;\n        left: number;\n      }>\n    >\n  ) => {\n    console.log(action);\n\n    if (action.type === 'dragstart') {\n      setPosition((prev) => {\n        return {\n          top: action.clientY,\n          left: action.clientX,\n        };\n      });\n    } else {\n      setPosition((prev) => {\n        return {\n          top: action.clientY,\n          left: action.clientX,\n        };\n      });\n    }\n  };\n  return (\n    <div className=\"draggable\">\n      {props.children.map((item, index) => {\n        return (\n          <BoxWrapper key={index} onDrag={onDrag}>\n            {item}\n          </BoxWrapper>\n        );\n      })}\n    </div>\n  );\n};\n","import { FunctionComponent } from 'react';\n\ninterface BoxProps {}\n\nexport const Box: FunctionComponent<BoxProps> = (props) => {\n  return <div className=\"box\"></div>;\n};\n\n// export default function Box() {\n//   return <div></div>;\n// }\n","import React from 'react';\nimport './App.css';\nimport { Draggable } from './component/Draggable';\nimport { Box } from './component/Box';\n\nfunction App() {\n  return (\n    <Draggable name=\"sdf\">\n      <Box></Box>\n      <Box></Box>\n    </Draggable>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}